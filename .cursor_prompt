**Project Specification for Next.js/TypeScript Scaffold with Firebase Auth**

Create a **Next.js/TypeScript project scaffold** with the following specifications:

### **Authentication Features**
1. **Login Options**:
   - Enable login via Google and email/password.
2. **Email Verification**:
   - Require email verification for users signing up with email.
3. **Password Reset**:
   - Provide a password reset functionality.
4. **Logout**:
   - Include logout functionality that redirects users to a specified page (e.g., homepage or login page).

### **Routing and Authorization**
5. **Protected Routes**:
   - Implement protected routes that restrict access to authenticated users only.
6. **Role-Based Routing**:
   - Differentiate between admin and regular users with separate dashboards or access levels.
7. **User Dashboard**:
   - Redirect authenticated users to a protected user dashboard.
8. **Account Settings**:
   - Create a protected route for users to manage their account settings, including profile updates and password changes.

### **User Experience Enhancements**
9. **Loading State Management**:
   - Add loading indicators for actions such as login, email verification, and password reset.
10. **Error Handling**:
    - Provide meaningful error messages for authentication errors (e.g., invalid email, incorrect password).
11. **Logout Redirect**:
    - Redirect users to a friendly page (e.g., homepage) after logging out.

### **Session Management**
12. **Session Persistence**:
    - Use Firebaseâ€™s `onAuthStateChanged` to ensure sessions persist across page reloads.
13. **Session Timeout**:
    - Handle expired sessions gracefully by prompting users to reauthenticate.

### **Firebase Integration**
14. **Environment Variables**:
    - Use environment variables to securely store Firebase configuration details (e.g., API key, project ID).

### **Unit Testing**
15. Add unit tests for key functionalities:
    - Authentication flows (login, signup, email verification, password reset, logout).
    - Protected routes to verify unauthorized access is blocked.
    - Role-based routing logic for admin and regular users.
    - Key UI components, such as loading indicators and error message displays.
16. Use a testing framework like **Jest** and a testing library like **React Testing Library** for writing and running tests.

### **Implementation Requirements**
17. Use **TypeScript** throughout the project for type safety.
18. Ensure the project adheres to **Next.js best practices**, including server-side rendering (SSR) and static site generation (SSG) where applicable.
19. Structure the codebase to be modular and scalable, with components and utilities organized clearly.

---

**Output Requirements**  
- A fully functional scaffold with all the above features integrated.  
- Well-commented code for easy understanding and customization.  
- Unit tests included with a clear directory structure and examples.  
- Instructions or documentation on setting up Firebase configuration, running the project, and running tests.